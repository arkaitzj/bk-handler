#!/usr/bin/env python3

import requests
import click
import os
import sys

@click.group()
def cli():
    pass


@cli.command()
@click.option("--pipeline-slug", type=str, required=True)
@click.option("--block-key", type=str, required=True)
@click.option("--build-id", type=int, required=True)
@click.option("--organization", type=str, required=True)
@click.option("--field", "fields", type=str, multiple=True)
def unblock(pipeline_slug, block_key, build_id, organization, fields):

    bk_token = os.getenv("BUILDKITE_TOKEN")
    if not bk_token:
        print("Missing env variable BUILDKITE_TOKEN")
        sys.exit(1)

    session = requests.Session()
    session.headers.update({'Authorization': f'Bearer {bk_token}'})
    url = f"https://api.buildkite.com/v2/organizations/{organization}/pipelines/{pipeline_slug}/builds/{build_id}"
    response = session.get(url)
    jobs = response.json()["jobs"]
    fjobs = list(filter(lambda j: j.get("step_key")== block_key, jobs))
    if len(fjobs) == 0:
        print(f"No jobs with key: {block_key}")
        sys.exit(1)
    if len(fjobs) > 1:
        print(f"Too many jobs with key: {block_key}, {len(block_key)}")
        sys.exit(1)

    job = fjobs[0]
    unblockable = job["unblockable"]
    if not unblockable:
        print(f"Cannot unblock non-unblockable step: {job}")
        sys.exit(1)
    url = job["unblock_url"]
    print(unblockable, url)
    
    data = None
    if fields:
        data = {"fields":{}}
        for field in fields:
            tokens=field.split("=")
            data["fields"][tokens[0]] = tokens[1]

    print(f"Data is {data}")
    response = session.put(url, json=data)
    print(f"{response.text}")
    if response.status_code != 200:
        sys.exit(1)


if __name__ == "__main__":
    cli()


